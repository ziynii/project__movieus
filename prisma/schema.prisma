// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String
  about      String       @db.MediumText
  avatar     String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tokens     Token[]
  reviews     Review[]
  reviewLike ReviewLike[]
  movieLikes  MovieLike[]
  follower   Follow[]     @relation(name: "follower")
  following  Follow[]     @relation(name: "following")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
}

model Review {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  movieId   Int
  review    String       @db.MediumText
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  rate      Int
	posterUrl	String
  like      ReviewLike[]

  @@index([userId])
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  reviewId  Int

  @@index([userId])
  @@index([reviewId])
}

model MovieLike {
  id        Int      @id @default(autoincrement())
	title			String
	posterUrl	String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movieId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  followBy    User     @relation(name: "follower", fields: [followById], references: [id], onDelete: Cascade)
  followById  Int
  followFor   User     @relation(name: "following", fields: [followForId], references: [id], onDelete: Cascade)
  followForId Int

  @@index([followById])
  @@index([followForId])
}
